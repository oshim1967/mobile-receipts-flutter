
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	Перем ТЗЧеки;
	Перем ТЗБанк;
	
	СтандартнаяОбработка = Ложь;
	
	
	ВсеПараметры = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	ПутьЗагрузки = ВсеПараметры.Найти("ПутьЗагрузки").Значение;
	
	Если Прав(ПутьЗагрузки, 1) <> "\" Тогда
		ПутьЗагрузки = ПутьЗагрузки + "\";
	КонецЕсли;
	
	НачПериода = ВсеПараметры.Найти("НачПериода").Значение;
	КонПериода = КонецДня(ВсеПараметры.Найти("КонПериода").Значение); 
	
	МесяцЗагрузки = Месяц(НачПериода + 24*3600);
	ГодЗагрузки = Прав(Формат(Год(НачПериода + 24*3600), "ЧГ=0"), 2);
	ПутьКФайламДБФ = ПутьЗагрузки + МесяцЗагрузки + "-" + ГодЗагрузки + "\";
	
	ИмяФайлаЧека = "CH-"+МесяцЗагрузки+"-"+ГодЗагрузки+".xml";	
	ТЗБанк = ПолучитьТаблицуБанка( ПутьКФайламДБФ );
	
	
	Если СуществуетФайл( ПутьЗагрузки + ИмяФайлаЧека ) Тогда
		ТЗЧеки = ЗначениеИзФайла(ПутьЗагрузки + ИмяФайлаЧека);
	Иначе
		ЗагрузитьЧекиССайта(ТЗЧеки, НачПериода, КонПериода);
		Если ТЗЧеки.Количество() > 0 Тогда 
			ЗначениеВФайл(ПутьЗагрузки + ИмяФайлаЧека, ТЗЧеки)
		КонецЕсли;	
		
	КонецЕсли;
	
	ВнешнийНабор = Новый Структура("ТЗБанк", ТЗБанк);
	ВнешнийНабор.Вставить("ТЗЧеки", ТЗЧеки);	
	
	Настройки = КомпоновщикНастроек.Настройки;
	
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешнийНабор, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	
КонецПроцедуры


Функция СуществуетФайл(ИмяФайла)
	ИскомыйФайл = Новый Файл(ИмяФайла);
	Если ИскомыйФайл.Существует() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции 


Функция ПолучитьТаблицуБанка( ПутьКФайламДБФ )
	
	НайденныеФайлы = НайтиФайлы(ПутьКФайламДБФ, "*.dbf");
	
	ТЗБанк = Новый ТаблицаЗначений;
	ТЗБанк.Колонки.Добавить("БанкДата", Новый ОписаниеТипов("Дата"));
	ТЗБанк.Колонки.Добавить("БанкСумма", Новый ОписаниеТипов("Число"));
	ТЗБанк.Колонки.Добавить("БанкСуммаОбщая", Новый ОписаниеТипов("Число"));
	ТЗБанк.Колонки.Добавить("БанкКомиссия", Новый ОписаниеТипов("Число"));
	ТЗБанк.Колонки.Добавить("БанкАдрТТ", Новый ОписаниеТипов("Строка"));
	
	
	Для каждого Файл Из НайденныеФайлы Цикл
		ИмяФайла = Файл.ПолноеИмя;
		ИмяФайлПриемник = ПутьКФайламДБФ + "temp.dbf";
		КопироватьФайл(ИмяФайла, ИмяФайлПриемник);
		ФайлDBF = Новый XBase;
		ФайлDBF.ОткрытьФайл(ИмяФайлПриемник,,Истина);
		ФайлDBF.Первая();
		
		Пока НЕ ФайлDBF.ВКонце() Цикл
			Если ФайлDBF.dk = "0" Тогда
				Продолжить;	
			КонецЕсли;
			
			КомиссияКонец = "грн";
			Назначение = СокрЛП(ФайлDBF.nazn); 
			ДлинаСтроки = СтрДлина(Назначение);
			ИндексКонцаАдреса = ДлинаСтроки - 66;
			Адрес = Сред(Назначение, 27, ИндексКонцаАдреса);
			КомиссияКонец = Прав(Назначение, 3);
			
			Если КомиссияКонец = "грн" Тогда
				Комиссия = Число(Лев(Прав(СокрЛП(ФайлDBF.nazn), 13), 10));
				НоваяСтрока = ТЗБанк.Добавить();
				НоваяСтрока.БанкАдрТТ = Адрес;
				НоваяСтрока.БанкКомиссия = Комиссия;
				НоваяСтрока.БанкДата = ФайлDBF.dt;
				НоваяСтрока.БанкСумма = Число(ФайлDBF.summa);
				НоваяСтрока.БанкСуммаОбщая = НоваяСтрока.БанкСумма + Комиссия;
			Иначе
				ФайлDBF.Следующая();
				Продолжить;	
			КонецЕсли;			
			
			ФайлDBF.Следующая();
		КонецЦикла;
		ФайлDBF.ЗакрытьФайл();
		УдалитьФайлы(ИмяФайлПриемник);
		
	КонецЦикла;	
	Возврат ТЗБанк;
	
КонецФункции

Процедура СообщитьОбОшибкеЗапроса(Ответ) Экспорт
	Перем СтруктураОтвета;
	Попытка
		СтруктураОтвета = JSONВОбъект(Ответ, , );
	Исключение
		Сообщить("Ошибка " + Ответ.КодСостояния + ". Не удалось разобрать ответ сервера.");
		Возврат;
	КонецПопытки;

	ТекстОшибки = "";

	Если СтруктураОтвета.Получить("errors") <> Неопределено Тогда
		СтруктураОшибки = СтруктураОтвета.Получить("errors");

		Если ТипЗнч(СтруктураОшибки) = Тип("Структура") ИЛИ ТипЗнч(СтруктураОшибки) = Тип("Соответствие") Тогда
			Для каждого ЭлементСтруктуры Из СтруктураОшибки Цикл
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда
					Для каждого ЭлементОшибки Из ЭлементСтруктуры.Значение Цикл
						Если ТипЗнч(ЭлементОшибки) = Тип("Структура") И ЭлементОшибки.Свойство("error") Тогда
							ТекстОшибки = ТекстОшибки + " " + ЭлементСтруктуры.Ключ + ": " + СтрЗаменить(ЭлементОшибки.error, "_", " ");
						ИначеЕсли ТипЗнч(ЭлементОшибки) = Тип("Соответствие") И ЭлементОшибки.Получить("error") <> Неопределено Тогда
							ТекстОшибки = ТекстОшибки + " " + ЭлементСтруктуры.Ключ + ": " + СтрЗаменить(ЭлементОшибки.Получить("error"), "_", " ");
						ИначеЕсли ТипЗнч(ЭлементОшибки) = Тип("Строка") Тогда // Добавлено для обработки простых строковых ошибок в массиве
							ТекстОшибки = ТекстОшибки + " " + ЭлементСтруктуры.Ключ + ": " + ЭлементОшибки;
						КонецЕсли;
					КонецЦикла;
				ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Строка") Тогда // Добавлено для обработки простых строковых ошибок
					ТекстОшибки = ТекстОшибки + " " + ЭлементСтруктуры.Ключ + ": " + ЭлементСтруктуры.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если Не ПустаяСтрока(ТекстОшибки) Тогда
            Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка " + Ответ.КодСостояния + " " + """" + ТекстОшибки + """";
			Сообщение.Сообщить();
		КонецЕсли;

		Возврат;
	КонецЕсли;

	Если СтруктураОтвета.Получить("message") <> Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Ошибка " + Ответ.КодСостояния + " " + СтруктураОтвета.Получить("message");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;

	Сообщить("Ошибка " + Ответ.КодСостояния);

КонецПроцедуры

Функция ПолучитьУчетныеДанныеДляAPI()
	
	УчетныеДанные = Новый Структура;
	УчетныеДанные.Вставить("АпиКлюч", "1");
	УчетныеДанные.Вставить("Логин", "11");
	УчетныеДанные.Вставить("Пароль", "111");
	
	Возврат УчетныеДанные;
	
КонецФункции


Процедура ЗагрузитьЧекиССайта(СписокЧеков, НачПериода, КонПериода) 
	Перем СоединениеHTTPS, СтруктраАдресЧеки;
	Перем ШопИд; 
	Перем ТорговыеТочки, Терминалы;
	Перем Токен;
	Перем АдресаТорговыхТочек;
	ТекущаяДата = ТекущаяДата();
	
	УчетныеДанные = ПолучитьУчетныеДанныеДляAPI();

	АпиКлюч = УчетныеДанные.АпиКлюч;
	Логин = УчетныеДанные.Логин;
	Пароль = УчетныеДанные.Пароль; 
	
	
	Отказ = Ложь;
	
	АпиКлюч = АпиКлюч;
	Логин = Логин; 
	Пароль = Пароль; 

	СоединениеHTTPS = ПолучитьНастройкиСоединения();
	ОтправитьЗапросТокен(СоединениеHTTPS, АпиКлюч, Токен);	
	
	ТорговыеТочки = Новый СписокЗначений(); 
	Терминалы = Новый СписокЗначений();    
	АдресаТорговыхТочек = Новый Соответствие(); 
	
	ОтправитьЗапросТорговыеТочки(СоединениеHTTPS, ТорговыеТочки, Терминалы, АдресаТорговыхТочек, АпиКлюч, Токен);
	
	
	СписокЧеков = Новый ТаблицаЗначений;
	
	СписокЧеков.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("Товар", Новый ОписаниеТипов("Строка"));	
	СписокЧеков.Колонки.Добавить("Артикул",  Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("КодТовара",  Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("ЕдиницаИзмерения",  Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число"));
	СписокЧеков.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	СписокЧеков.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	СписокЧеков.Колонки.Добавить("СуммаДокумента", Новый ОписаниеТипов("Число"));
	СписокЧеков.Колонки.Добавить("ИдентификаторЧека", Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("ФормаОплаты", Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("ДатаЧека", Новый ОписаниеТипов("Дата"));
	СписокЧеков.Колонки.Добавить("НомерЧека",Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("ИдМагазина", Новый ОписаниеТипов("Строка")); 
	СписокЧеков.Колонки.Добавить("ИдТерминала",Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("ФОП",Новый ОписаниеТипов("Строка"));	
	СписокЧеков.Колонки.Добавить("АдресМагазина",Новый ОписаниеТипов("Строка"));
	СписокЧеков.Колонки.Добавить("Магазин",Новый ОписаниеТипов("Строка"));
	
	ВсегоСтраниц = Неопределено;
	ТекущаяСтраница = 1;
	
	МассивДатЧеков = Новый Массив;
	МассивДатЧеков.Добавить("created_at");
	МассивДатЧеков.Добавить("updated_at");

	Пока Истина Цикл
		
		МассивПараметров = Новый Структура("date_start, date_end", НачалоДня(НачПериода), КонецДня(КонПериода));
		МассивПараметров.Вставить("per_page", 800);			
		
		Если ТекущаяСтраница <> Неопределено Тогда
			МассивПараметров.Вставить("page", ТекущаяСтраница);
		КонецЕсли; 
		
		СтруктураАдреса = Новый Структура("АдресРесурса", "api/v1/pos/receipts");
		ЗапросHTTP = ПолучитьHTTPЗапрос(ПолучитьАдресРесурса(СтруктураАдреса, МассивПараметров), АпиКлюч, Токен);
		Ответ = ОтправитьЗапросGET(СоединениеHTTPS, ЗапросHTTP);
		
		Если Ответ.КодСостояния <> 200 Тогда
			Сообщить("Ошибка работы со смарткассой при загрузке чеков: " + Ответ.КодСостояния);
			СообщитьОбОшибкеЗапроса(Ответ); 
			Возврат;
		КонецЕсли;
		
		СтруктураРезультата = JSONВОбъект(Ответ, МассивДатЧеков); 
		
		ДанныеЧеков = СтруктураРезультата.Получить("data"); // Пытаемся получить ключ "data"
		Если ДанныеЧеков = Неопределено Тогда 
		    Сообщить("Отсутствует поле 'data' в ответе от сервера при загрузке чеков, несмотря на код 200. Ответ: " + Ответ.ПолучитьТелоКакСтроку());
		    Возврат; 
		КонецЕсли;
		
		ДанныеОтвета = СтруктураРезультата.Получить("meta"); // Пытаемся получить ключ "meta"
		Если ДанныеОтвета = Неопределено Тогда
		    Сообщить("Отсутствует поле 'meta' в ответе от сервера при загрузке чеков, несмотря на код 200. Ответ: " + Ответ.ПолучитьТелоКакСтроку());
		    Возврат; 
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЧеков) <> Тип("Массив") Тогда
		    Сообщить("Поле 'data' в ответе от сервера при загрузке чеков не является массивом. Тип: " + ТипЗнч(ДанныеЧеков));
		    Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеОтвета) <> Тип("Соответствие") И ТипЗнч(ДанныеОтвета) <> Тип("Структура") Тогда // meta может быть и структурой
		    Сообщить("Поле 'meta' в ответе от сервера при загрузке чеков не является объектом (Соответствие/Структура). Тип: " + ТипЗнч(ДанныеОтвета));
		    Возврат;
		КонецЕсли;
		
		ТекущаяСтраница = ДанныеОтвета.Получить("current_page"); 
		
		Для каждого ТекЗаписьЧека Из ДанныеЧеков Цикл
			ФормыОплатыЧеков = ТекЗаписьЧека.Получить("payment_transactions");
			Если ТипЗнч(ФормыОплатыЧеков) <> Тип("Массив") ИЛИ ФормыОплатыЧеков.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//// ИЗМЕНЕНО: Блок проверки для пропуска чека
			СтатусЧека = ТекЗаписьЧека.Получить("state");
			//ПропуститьЧек = Ложь;
			//Если СтатусЧека = 2 Тогда // Проверяем только для отложенных чеков (state=2)
			//	Для Каждого ТекФормаОплаты Из ФормыОплатыЧеков Цикл
			//		// transaction_type_id = 2 (Эквайринг) и payment_type_id = 0 (Оплата)
			//		Если ТекФормаОплаты.Получить("transaction_type_id") = 2 И ТекФормаОплаты.Получить("payment_type_id") = 0 Тогда
			//			ПропуститьЧек = Истина;
			//			Прервать; // Нашли нужную транзакцию, можно выходить
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
			
			//Если ПропуститьЧек Тогда
			//	Продолжить; // Пропускаем всю дальнейшую обработку этого чека
			//КонецЕсли;
			// КОНЕЦ ИЗМЕНЕНИЙ
			
			//payment_type_id (тип операции): Это характеристика, которая описывает что именно происходит с деньгами в рамках одной операции. 
			//Он определяет, это просто оплата, отмена или возврат.
			//0 - Оплата (Payment)
			//1 - Отмена (Cancellation)
			//2 - Возврат (Return)
			
			//transaction_type_id (средство оплаты): Это указывает на как именно производится платеж, то есть какое средство оплаты было использовано.
			//0 - Готівка (Наличные)
			//1 - Картка (Карта)
			//2 - Еквайринг (Эквайринг)
			//3 - За реквізитами (IBAN) (По реквизитам (IBAN))
			//4 - Переказ з картки (Перевод с карты) 
			
			//параметр state в объекте указывает на текущее состояние чека и может принимать следующие значения:
			//1 - Отложенный чек (Відкладений чек).
			//2 - Оплаченный чек (Оплачений чек) — выставляется кассой после оплаты.
			//3 - Возврат (Повернення) — также выставляется кассой после оплаты.
			
			ЕстьКарточнаяОплата = Ложь;
			Для Каждого ТекФормаОплаты Из ФормыОплатыЧеков Цикл
				ТипТранзакции = ТекФормаОплаты.Получить("transaction_type_id");
				Если ТипТранзакции = 1 ИЛИ ТипТранзакции = 2 ИЛИ ТипТранзакции = 4 ИЛИ ТипТранзакции = 3 Тогда 
					ЕстьКарточнаяОплата = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла; 

			
			Если НЕ ЕстьКарточнаяОплата Тогда
				Продолжить;
			КонецЕсли;
			
			ДатаЧека = ТекЗаписьЧека.Получить("created_at");
			Если ДатаЧека < НачПериода ИЛИ ДатаЧека > КонПериода Тогда
				Продолжить;
			КонецЕсли;
			
			ИдМагазина = ТекЗаписьЧека.Получить("shop_id");
			Магазин = ""; 
			Если ТорговыеТочки.НайтиПоЗначению(ИдМагазина) <> Неопределено Тогда
			    Магазин = ТорговыеТочки.НайтиПоЗначению(ИдМагазина).Представление;
			КонецЕсли;
			
			АдресТорговойТочки = АдресаТорговыхТочек.Получить(ИдМагазина);
			
			Если АдресТорговойТочки = Неопределено Тогда
				Сообщить("Не найден адрес для магазина с ID: " + ИдМагазина + ". Чек ID: " + ТекЗаписьЧека.Получить("id"));
				Продолжить;
			КонецЕсли;
			
			ФОП = ""; 
			ПозицияТочкиСЗапятой = СтрНайти(АдресТорговойТочки, ". ,");  
			Если ПозицияТочкиСЗапятой > 0 Тогда
				ФОП = Лев(АдресТорговойТочки, ПозицияТочкиСЗапятой - 1);
			КонецЕсли;
			
			ТипЧека = ТекЗаписьЧека.Получить("type");
			// СтатусЧека уже получен выше для новой проверки
			
			СуммаДокумента = 0;
			СтрокаСуммы = ТекЗаписьЧека.Получить("total_amount");
			Если НЕ ПустаяСтрока(СтрокаСуммы) Тогда
				Попытка
					СуммаДокумента = Число(СтрЗаменить(СтрокаСуммы, ".", ","));
				Исключение
					Сообщить("Не удалось преобразовать сумму '" + СтрокаСуммы + "' в число для чека ID: " + ТекЗаписьЧека.Получить("id"));
				КонецПопытки;
			КонецЕсли;
			
			Если (ТипЧека = 3) ИЛИ (ТипЧека = 4) ИЛИ (СтатусЧека = 3) Тогда
				СуммаДокумента = -Abs(СуммаДокумента);
			КонецЕсли;
			
			НоваяСтрока = СписокЧеков.Добавить();
			НоваяСтрока.СуммаДокумента = СуммаДокумента;
			НоваяСтрока.ИдМагазина = ИдМагазина;
			НоваяСтрока.ФОП = ФОП;
			НоваяСтрока.АдресМагазина = АдресТорговойТочки; 
			НоваяСтрока.Магазин = Магазин;
			НоваяСтрока.ДатаЧека = НачалоДня(ДатаЧека);
			
		КонецЦикла;
		
		ЗначениеNextPage = ДанныеОтвета.Получить("next_page");
		Если ЗначениеNextPage = Неопределено ИЛИ ЗначениеNextPage = Null Тогда // Null для некоторых API означает конец
			Прервать;
		Иначе
			ТекущаяСтраница = ЗначениеNextPage; 
			Продолжить;
		КонецЕсли;		
		
		Пауза(3);
	КонецЦикла;

	СписокЧеков.Свернуть("ДатаЧека, АдресМагазина", "СуммаДокумента");
	
КонецПроцедуры





Функция Abs(Число)
	Если Число < 0 Тогда
		Возврат -Число;
	Иначе
		Возврат Число;
	КонецЕсли;
КонецФункции



// Допоміжна функція для безпечного отримання тіла відповіді (можна винести в загальний модуль)
Функция ПопыткаПолучитьТелоОтвета(Ответ, МаксДлина = 0) Экспорт
    Если Ответ = Неопределено Тогда
        Возврат "<Відповідь не визначена>";
    КонецЕсли;
    Попытка
        ТелоСтрокой = Ответ.ПолучитьТелоКакСтроку();
        Если МаксДлина > 0 Тогда
            Возврат Сред(ТелоСтрокой, 1, МаксДлина);
        Иначе
            Возврат ТелоСтрокой;
        КонецЕсли;
    Исключение
        Возврат "<Не вдалося отримати тіло відповіді: " + ОписаниеОшибки() + ">";
    КонецПопытки;
КонецФункции


Процедура Пауза(КолСекунд)
	ДатаВыхода = ТекущаяДата() + КолСекунд;
	Пока ТекущаяДата() < ДатаВыхода Цикл
		Продолжить;
	КонецЦикла;
	Возврат;
КонецПроцедуры

Процедура ОтправитьЗапросТокен(СоединениеHTTPS, АпиКлюч, Токен, Отказ = Ложь)
	Перем СтруктураАдреса, СтруктураЗапроса, ЗапросHTTP, Ответ;
	СтруктураАдреса = ПолучитьАдресТокен();
	СтруктураЗапроса = ПолучитьСтруктураДляАвторизация();
	
	ЗапросHTTP = ПолучитьHTTPЗапрос(ПолучитьАдресРесурса(СтруктураАдреса), АпиКлюч, Токен, ОбъектВJSON(СтруктураЗапроса));
	
	Ответ = ОтправитьЗапросPOST(СоединениеHTTPS, ЗапросHTTP);
	Если Ответ.КодСостояния <> 201 Тогда
		Отказ = Истина;
		//СообщитьОбОшибкеЗапроса(Ответ);
	Иначе
		МассивДат = Новый Массив;
		МассивДат.Добавить("access_expires_at");
		МассивДат.Добавить("refresh_expires_at");
		
		СтруктрураОтвета = JSONВОбъект(Ответ, МассивДат);
		Токен = СтруктрураОтвета.Получить("data").Получить("access");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьЗапросТорговыеТочки(СоединениеHTTPS, ТорговыеТочки, Терминалы,АдресаТорговыхТочек, АпиКлюч, Токен)
	Перем СтруктураАдреса, СтруктураЗапроса, ЗапросHTTP, Ответ, Строка;
	СтруктураАдреса = ПолучитьАдресТорговыеТочки();
	СтруктураЗапроса = ПолучитьСтруктураДляАвторизация();
	
	ТорговыеТочки.Очистить();
	Страница =1;
	Пока Истина Цикл 
		СтруктураАдреса.АдресРесурса = "/api/v1/rsn/shops" + "?page=" + Строка(Страница);	
		ЗапросHTTP = ПолучитьHTTPЗапрос(ПолучитьАдресРесурса(СтруктураАдреса), АпиКлюч, Токен);
		Ответ = ОтправитьЗапросGET(СоединениеHTTPS, ЗапросHTTP);
		Строка = Ответ.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Строка);
		РезТочки = ПрочитатьJSON(Чтение);
		
		ДляПоискаТТ = Новый Соответствие;
		Для каждого Ел Из РезТочки.data Цикл
			//АдресаТорговыхТочек.Вставить(Ел.id, Ел.address.content);
			АдресаТорговыхТочек.Вставить(Ел.id, Ел.website_url);
			//ТорговыеТочки.Добавить(Ел.shop_id, Ел.title);
			ТорговыеТочки.Добавить(Ел.id, Ел.title);
			ДляПоискаТТ.Вставить(Ел.id, Ел.title);
		КонецЦикла; 
		Если РезТочки.meta.next_page = Неопределено Тогда
			Прервать;
		Иначе
			Страница = Страница + 1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Терминалы.Очистить();
	Страница = 1;
	СтруктураАдреса = ПолучитьАдресТерминалы();	
	Пока Истина Цикл	
		СтруктураАдреса.АдресРесурса = "/api/v1/pos/terminals" + "?page=" + Строка(Страница);
		ЗапросHTTP = ПолучитьHTTPЗапрос(ПолучитьАдресРесурса(СтруктураАдреса), АпиКлюч, Токен);
		Ответ = ОтправитьЗапросGET(СоединениеHTTPS, ЗапросHTTP);
		Строка = Ответ.ПолучитьТелоКакСтроку();
		Чтение = Новый ЧтениеJSON;
		Чтение.УстановитьСтроку(Строка);
		Рез = ПрочитатьJSON(Чтение);
		Для каждого Ел Из Рез.data Цикл
			Терминалы.Добавить(Ел.id, ?(Строка(Ел.name) = "", Строка(Ел.serial_number), Строка(Ел.name)) + " / "+ ДляПоискаТТ.Получить(Ел.shop_id));
		КонецЦикла;
		Если Рез.meta.next_page = Неопределено Тогда
			Прервать;
		Иначе
			Страница = Страница + 1;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры            

Функция ПолучитьАдресТорговыеТочки()
	Возврат Новый Структура("АдресРесурса", "/api/v1/rsn/shops");
КонецФункции  

Функция ПолучитьHTTPЗапрос(Адрес, АПИКлюч, Токен, СтрокаJSON = Неопределено) Экспорт
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Если АПИКлюч <> "" Тогда
		Заголовки.Вставить("X-API-KEY", СокрЛП(АПИКлюч));
	КонецЕсли;
	Если Токен <> "" Тогда
		Заголовки.Вставить("Authorization", Токен);
	КонецЕсли;
	
	ЗапросHTTP = Новый HTTPЗапрос(Адрес, Заголовки);
	Если СтрокаJSON <> Неопределено Тогда
		ЗапросHTTP.УстановитьТелоИзСтроки(СтрокаJSON, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.НеИспользовать);
	КонецЕсли;
	
	Возврат ЗапросHTTP;
	
КонецФункции

Функция ПолучитьНастройкиСоединения() Экспорт
	СертификатУдостоверяюшихЦентров = Новый СертификатыУдостоверяющихЦентровWindows;
	
	
	Ssl = Новый ЗащищенноеСоединениеOpenSSL;
	Сервер = ПолучитьАдресРесурса(ПолучитьАдресРесурсаСоединения());
	
	СоединениеHTTPS = Новый HTTPСоединение(Сервер, Неопределено, Неопределено, Неопределено, Неопределено, 60, Ssl);
	Возврат СоединениеHTTPS;
	
КонецФункции


Функция ПолучитьАдресРесурсаСоединения()
	Возврат Новый Структура("АдресРесурса", "core.smartkasa.ua");
	
КонецФункции

Функция ПолучитьСтруктураДляАвторизация()
	Возврат Новый Структура("session", ПолучитьПараметрыАвторизации());
КонецФункции 

Функция ПолучитьАдресТовары()
	Возврат Новый Структура("АдресРесурса", "api/v1/inventory/products");
КонецФункции

Функция ПолучитьАдресСписокЧеков()
	Возврат Новый Структура("АдресРесурса", "api/v1/pos/receipts");
КонецФункции

Функция ПолучитьАдресСписокИдТорговыхТочек()
	Возврат Новый Структура("АдресРесурса", "api/v1/pos/receipts");
КонецФункции


Функция ПолучитьСоотвествиеФормыОплаты()
	
	СоотвествиеФормыОплаты = Новый Соответствие;
	СоотвествиеФормыОплаты.Вставить(0, ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная"));
	СоотвествиеФормыОплаты.Вставить(1, ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта"));
	СоотвествиеФормыОплаты.Вставить(2, "Еквайринг (ID 2)"); 
	СоотвествиеФормыОплаты.Вставить(4, "Переказ з картки (ID 4)");
	Возврат СоотвествиеФормыОплаты;	
	
	
КонецФункции
Функция ПолучитьАдресРесурса(СтруктураДанныхРесурса, МассивПараметров = Неопределено, Разделитель = "?") Экспорт
	АдресРесурса = "";
	Для каждого ЭлементСтруктуры Из СтруктураДанныхРесурса Цикл
		АдресРесурса = АдресРесурса + ЭлементСтруктуры.Значение + "/";
	КонецЦикла;
	АдресРесурса = Сред(АдресРесурса, 1, СтрДлина(АдресРесурса) - 1);
	
	Если МассивПараметров <> Неопределено Тогда
		АдресРесурса = АдресРесурса + Разделитель;
		Для каждого Элемент Из МассивПараметров Цикл
			Если ТипЗнч(Элемент.Значение) = Тип("Дата") Тогда
				АдресРесурса = АдресРесурса + Элемент.Ключ + "=" + ЗаписатьДатуJSON(Элемент.Значение, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата) + "&";
			ИначеЕсли Элемент.Ключ = "id" Тогда
				АдресРесурса = АдресРесурса + Элемент.Значение + "&";
			Иначе	
				АдресРесурса = АдресРесурса + Элемент.Ключ + "=" + Элемент.Значение + "&";
			КонецЕсли;
		КонецЦикла;
		АдресРесурса = Сред(АдресРесурса, 1, СтрДлина(АдресРесурса) - 1);
	КонецЕсли;
	
	Возврат АдресРесурса;
	
КонецФункции

Функция ОтправитьЗапросGET(СоединениеHTTPS, ЗапросHTTP) Экспорт
	Возврат СоединениеHTTPS.Получить(ЗапросHTTP);
КонецФункции


Функция JSONВОбъект(Ответ, МассивСериализацияДаты = Неопределено, ВернутьСоответствие = Истина) Экспорт
	Перем СтрокаJSON;
	СтрокаJSON = Ответ.ПолучитьТелоКакСтроку();
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON, ВернутьСоответствие, МассивСериализацияДаты);
	
	Возврат СтруктураОтвета;
	
КонецФункции



Функция ПолучитьАдресТокен()
	Возврат Новый Структура("АдресРесурса", "/api/v1/auth/sessions");
КонецФункции

Функция ПолучитьАдресТерминалы()
	Возврат Новый Структура("АдресРесурса", "api/v1/pos/terminals");
КонецФункции

Функция ОбъектВJSON(СтруктураЗапроса) Экспорт
	JSONЗапись = Новый ЗаписьJSON;
	JSONЗапись.УстановитьСтроку();
	ЗаписатьJSON(JSONЗапись, СтруктураЗапроса);
	СтрокаJSON = JSONЗапись.Закрыть();
	
	Возврат СтрокаJSON;
КонецФункции


Функция ОтправитьЗапросPOST(СоединениеHTTPS, ЗапросHTTP) Экспорт
	Возврат СоединениеHTTPS.ОтправитьДляОбработки(ЗапросHTTP);
КонецФункции


Функция ПолучитьПараметрыАвторизации()
	СтруктураАвторизации = Новый Структура;
	СтруктураАвторизации.Вставить("phone_number", Формат("11"));
	СтруктураАвторизации.Вставить("password", Формат("111"));
	Возврат СтруктураАвторизации;
	
КонецФункции


